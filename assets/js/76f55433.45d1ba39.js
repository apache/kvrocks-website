"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8894],{5680:(e,t,r)=>{r.d(t,{xA:()=>c,yg:()=>b});var o=r(6540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=o.createContext({}),p=function(e){var t=o.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(r),d=n,b=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return r?o.createElement(b,i(i({ref:t},c),{},{components:r})):o.createElement(b,i({ref:t},c))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:n,i[1]=s;for(var p=2;p<a;p++)i[p]=r[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7762:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var o=r(8168),n=(r(6540),r(5680));const a={slug:"how-to-implement-bitmap-on-rocksdb",title:"How to implement bitmap on RocksDB?",authors:["hulk"]},i=void 0,s={permalink:"/blog/how-to-implement-bitmap-on-rocksdb",editUrl:"https://github.com/apache/kvrocks-website/tree/main/blog/2021-11-07-how-to-implement-bitmap-on-rocksdb/index.md",source:"@site/blog/2021-11-07-how-to-implement-bitmap-on-rocksdb/index.md",title:"How to implement bitmap on RocksDB?",description:'Most developers should be familiar with bitmap, in addition to the storage implementation for the bloom filter, and many databases also provide bitmap type indexes. For memory storage, the bitmap can be regarded as the special type of sparse bit array, which would not cause the read-write amplification issue (means read/write bytes far more than the request). While Redis supports bit-related operations on string types, it is a big challenge for disk KV-based storage like Kvrocks. So this article mainly discusses "How to reduce disk read/write amplification on RocksDB".',date:"2021-11-07T00:00:00.000Z",formattedDate:"November 7, 2021",tags:[],readingTime:6.59,hasTruncateMarker:!0,authors:[{name:"Hulk Lin",title:"Apache Kvrocks Founders",url:"https://github.com/git-hulk",imageURL:"https://github.com/git-hulk.png",key:"hulk"}],frontMatter:{slug:"how-to-implement-bitmap-on-rocksdb",title:"How to implement bitmap on RocksDB?",authors:["hulk"]},prevItem:{title:"How we use RocksDB in Kvrocks?",permalink:"/blog/how-we-use-rocksdb-in-kvrocks"}},l={authorsImageUrls:[void 0]},p=[],c={toc:p},m="wrapper";function u(e){let{components:t,...r}=e;return(0,n.yg)(m,(0,o.A)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("p",null,"Most developers should be familiar with bitmap, in addition to the storage implementation for the bloom filter, and many databases also provide bitmap type indexes. For memory storage, the bitmap can be regarded as the special type of sparse bit array, which would not cause the read-write amplification issue (means read/write bytes far more than the request). While Redis supports bit-related operations on string types, it is a big challenge for disk KV-based storage like ",(0,n.yg)("a",{parentName:"p",href:"https://github.com/apache/kvrocks"},"Kvrocks"),'. So this article mainly discusses "',(0,n.yg)("strong",{parentName:"p"},"How to reduce disk read/write amplification on RocksDB"),'".'))}u.isMDXComponent=!0}}]);