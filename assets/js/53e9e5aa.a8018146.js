"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7958],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),p=s(n),u=r,k=p["".concat(o,".").concat(u)]||p[u]||m[u]||i;return n?a.createElement(k,l(l({ref:t},c),{},{components:n})):a.createElement(k,l({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var d={};for(var o in t)hasOwnProperty.call(t,o)&&(d[o]=t[o]);d.originalType=e,d[p]="string"==typeof e?e:r,l[1]=d;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},630:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>d,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={},l="Index encoding format for Kvrocks Search",d={unversionedId:"kvrocks-search-index-encoding",id:"kvrocks-search-index-encoding",title:"Index encoding format for Kvrocks Search",description:"Different from the encoding method of other data structures in Kvrocks (e.g. String, Hash, ZSet ...),",source:"@site/community/kvrocks-search-index-encoding.md",sourceDirName:".",slug:"/kvrocks-search-index-encoding",permalink:"/community/kvrocks-search-index-encoding",draft:!1,editUrl:"https://github.com/apache/kvrocks-website/tree/main/community/kvrocks-search-index-encoding.md",tags:[],version:"current",frontMatter:{},sidebar:"community",previous:{title:"Data structures design",permalink:"/community/data-structure-on-rocksdb"},next:{title:"Releases",permalink:"/community/category/releases"}},o={},s=[{value:"Common encoding",id:"common-encoding",level:2},{value:"Key types",id:"key-types",level:3},{value:"Field types and flags",id:"field-types-and-flags",level:3},{value:"Metadata encoding",id:"metadata-encoding",level:2},{value:"Index metadata",id:"index-metadata",level:3},{value:"Index prefixes",id:"index-prefixes",level:3},{value:"Tag field metadata",id:"tag-field-metadata",level:3},{value:"Numeric field metadata",id:"numeric-field-metadata",level:3},{value:"Index data encoding",id:"index-data-encoding",level:2},{value:"Tag field",id:"tag-field",level:3},{value:"Numeric field",id:"numeric-field",level:3}],c={toc:s},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"index-encoding-format-for-kvrocks-search"},"Index encoding format for Kvrocks Search"),(0,r.kt)("p",null,"Different from ",(0,r.kt)("a",{parentName:"p",href:"https://kvrocks.apache.org/community/data-structure-on-rocksdb"},"the encoding method of other data structures")," in Kvrocks (e.g. String, Hash, ZSet ...),\nApache Kvrocks\u2122 Search (a.k.a. Kvrocks Search) uses an independent column family (named ",(0,r.kt)("inlineCode",{parentName:"p"},"search"),")\nand a separately designed encoding format to store indexing-related metadata and data."),(0,r.kt)("p",null,"WARNING: Kvrocks Search is currently in development and has not been officially released,\nso its encoding format may undergo breaking changes."),(0,r.kt)("h2",{id:"common-encoding"},"Common encoding"),(0,r.kt)("h3",{id:"key-types"},"Key types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"key type"),(0,r.kt)("th",{parentName:"tr",align:null},"enum value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"INDEX_META"),(0,r.kt)("td",{parentName:"tr",align:null},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PREFIXES"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"FIELD_META"),(0,r.kt)("td",{parentName:"tr",align:null},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"FIELD"),(0,r.kt)("td",{parentName:"tr",align:null},"3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"FIELD_ALIAS"),(0,r.kt)("td",{parentName:"tr",align:null},"4")))),(0,r.kt)("p",null,"The common encoding format of key is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+-------------+-------------+----------------+-------------+-------------------+\n|  ns size    |  namespace  |  key type   |  idx name size |  index name |  other fields...  |\n| (1byte: X)  |   (Xbyte)   |  (1byte)    |   (4bytes: Y)  |  (Y bytes)  |   (variable)      |\n+-------------+-------------+-------------+----------------+-------------+-------------------+\n")),(0,r.kt)("h3",{id:"field-types-and-flags"},"Field types and flags"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"field type"),(0,r.kt)("th",{parentName:"tr",align:null},"enum value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tag"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"numeric"),(0,r.kt)("td",{parentName:"tr",align:null},"2")))),(0,r.kt)("p",null,"The common encoding format of a ",(0,r.kt)("em",{parentName:"p"},"field flag")," is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"|              8 bit                                 |\n|----------------------------------------------------|\n|  noindex: 1bit | field type: 4bit | reserved: 3bit |\n")),(0,r.kt)("h2",{id:"metadata-encoding"},"Metadata encoding"),(0,r.kt)("p",null,"In Kvrocks Search, metadata refers to the metadata of an index (also known as a schema),\nincluding some properties of the index, which fields are included in this index,\nwhat type each field is, and what properties they have."),(0,r.kt)("h3",{id:"index-metadata"},"Index metadata"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"| namespace | INDEX_META | index name |      | index flag | on data type  |\n|-----------|------------|------------|  ->  |------------|---------------|\n| 1+X bytes |  1 byte    | 4+Y bytes  |  ->  |   1 byte   |    1 byte     |\n")),(0,r.kt)("p",null,"where ",(0,r.kt)("em",{parentName:"p"},"index flag")," is currently 8-bit all reserved (equals to ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"), and ",(0,r.kt)("em",{parentName:"p"},"on data type")," is one of:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"on data type"),(0,r.kt)("th",{parentName:"tr",align:null},"enum value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"HASH"),(0,r.kt)("td",{parentName:"tr",align:null},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"JSON"),(0,r.kt)("td",{parentName:"tr",align:null},"10")))),(0,r.kt)("h3",{id:"index-prefixes"},"Index prefixes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"| namespace | PREFIXES   | index name |      | prefix strings... |\n|-----------|------------|------------|  ->  |-------------------|\n| 1+X bytes |  1 byte    | 4+Y bytes  |  ->  |  (4+Zi)*N bytes   |\n")),(0,r.kt)("p",null,"Index prefixes are used to determine which keys belong to the tracking scope of this index.\nIt consists of an array of strings, where each string is a key prefix."),(0,r.kt)("h3",{id:"tag-field-metadata"},"Tag field metadata"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"| namespace | FIELD_META | index name | field name |      | field flag | separator  | case sensitive |\n|-----------|------------|------------|------------|  ->  |------------|------------|----------------|\n| 1+X bytes |  1 byte    | 4+Y bytes  | 4+Z bytes  |  ->  |   1 byte   |  1 byte    |     1 byte     |\n")),(0,r.kt)("p",null,"where ",(0,r.kt)("em",{parentName:"p"},"separator")," currently can only be an ASCII character, and case sensitive can be ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," (false) or ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," (true)."),(0,r.kt)("h3",{id:"numeric-field-metadata"},"Numeric field metadata"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"| namespace | FIELD_META | index name | field name |      | field flag |\n|-----------|------------|------------|------------|  ->  |------------|\n| 1+X bytes |  1 byte    | 4+Y bytes  | 4+Z bytes  |  ->  |   1 byte   |\n")),(0,r.kt)("h2",{id:"index-data-encoding"},"Index data encoding"),(0,r.kt)("p",null,"Index data refers to the information stored after indexing the real data,\nwhich is used to quickly get corresponding data in subsequent query processes."),(0,r.kt)("h3",{id:"tag-field"},"Tag field"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"| namespace | FIELD   | index name | field name | tag value  | user key   |      |    null    |\n|-----------|---------|------------|------------|------------|------------|  ->  |------------|\n| 1+X bytes | 1 byte  | 4+Y bytes  | 4+Z bytes  | 4+A bytes  | 4+B bytes  |  ->  |   0 byte   |\n")),(0,r.kt)("h3",{id:"numeric-field"},"Numeric field"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"| namespace | FIELD   | index name | field name | floating number | user key   |      |    null    |\n|-----------|---------|------------|------------|-----------------|------------|  ->  |------------|\n| 1+X bytes | 1 byte  | 4+Y bytes  | 4+Z bytes  |    8 bytes      | 4+B bytes  |  ->  |   0 byte   |\n")))}m.isMDXComponent=!0}}]);